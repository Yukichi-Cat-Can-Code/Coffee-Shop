<?php

require_once __DIR__ . '/BaseTest.php';

use Facebook\WebDriver\WebDriverBy;
use Facebook\WebDriver\WebDriverSelect;

/**
 * Test class cho ch·ª©c nƒÉng ƒë·∫∑t b√†n
 */
class BookingTest extends BaseTest
{
    // Th√¥ng tin user test
    private $userEmail = 'abcdef@gmail.com';
    private $userPassword = 'abcdefgh';
    
    // Th√¥ng tin ƒë·∫∑t b√†n test
    private $testBookingData = [
        'first_name' => 'Nguy·ªÖn',
        'last_name' => 'VƒÉn Test',
        'phone_number' => '0987654321',
        'message' => 'ƒê√¢y l√† test booking t·ª´ Selenium'
    ];
    
    public function runAllTests()
    {
        $this->logInfo("üß™ B·∫ÆT ƒê·∫¶U TEST BOOKING SYSTEM");
        echo "=" . str_repeat("=", 60) . "\n";
        
        $this->setUp();
        
        try {
            $this->testUserLoginRequired();
            $this->testValidBooking();
            $this->testBookingFormValidation();
            $this->testDateTimeSelection();
            
            $this->logSuccess("T·∫§T C·∫¢ BOOKING TESTS ƒê√É PASS!");
        } catch (Exception $e) {
            $this->logError("Test FAILED: " . $e->getMessage());
            $this->takeScreenshot('booking_failed');
            throw $e;
        } finally {
            $this->tearDown();
        }
    }
    
    /**
     * Test y√™u c·∫ßu ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi ƒë·∫∑t b√†n
     */
    public function testUserLoginRequired()
    {
        $this->logStep(1, "Ki·ªÉm tra y√™u c·∫ßu ƒëƒÉng nh·∫≠p");
        
        // Truy c·∫≠p tr·ª±c ti·∫øp trang ƒë·∫∑t b√†n m√† ch∆∞a ƒëƒÉng nh·∫≠p
        $this->logAction("Truy c·∫≠p trang ƒë·∫∑t b√†n m√† ch∆∞a ƒëƒÉng nh·∫≠p");
        $this->driver->get($this->baseUrl . '/booking/book.php');
        
        // Ch·ªù v√† ki·ªÉm tra c√≥ chuy·ªÉn h∆∞·ªõng ƒë·∫øn login kh√¥ng
        $this->pauseForObservation(3, "Ki·ªÉm tra response c·ªßa h·ªá th·ªëng");
        $currentUrl = $this->driver->getCurrentURL();
        
        if (strpos($currentUrl, 'login') !== false) {
            $this->logSuccess("H·ªá th·ªëng y√™u c·∫ßu ƒëƒÉng nh·∫≠p ƒë√∫ng!");
        } else {
            // Ki·ªÉm tra xem c√≥ th√¥ng b√°o y√™u c·∫ßu ƒëƒÉng nh·∫≠p kh√¥ng
            try {
                $this->assertElementExists(WebDriverBy::className('alert'));
                $this->logSuccess("Hi·ªÉn th·ªã th√¥ng b√°o y√™u c·∫ßu ƒëƒÉng nh·∫≠p!");
            } catch (Exception $e) {
                $this->logWarning("C·∫£nh b√°o: H·ªá th·ªëng c√≥ th·ªÉ kh√¥ng y√™u c·∫ßu ƒëƒÉng nh·∫≠p");
            }
        }
        
        $this->pauseForObservation(2, "Ho√†n th√†nh test y√™u c·∫ßu ƒëƒÉng nh·∫≠p");
    }
    
    /**
     * Th·ª±c hi·ªán ƒëƒÉng nh·∫≠p user (n·∫øu c·∫ßn)
     */
    private function loginUser()
    {
        $this->logAction("ƒêƒÉng nh·∫≠p user ƒë·ªÉ test booking");
        
        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p user
        $this->driver->get($this->baseUrl . '/auth/login.php');
        $this->pauseForObservation(2, "Trang login user ƒë√£ load");
        
        try {
            // Ki·ªÉm tra form ƒëƒÉng nh·∫≠p c√≥ t·ªìn t·∫°i
            $this->waitForElement(WebDriverBy::name('email'), 5);
            
            // ƒêi·ªÅn th√¥ng tin ƒëƒÉng nh·∫≠p
            $this->fillInput(WebDriverBy::name('email'), $this->userEmail, 'Email user');
            $this->fillInput(WebDriverBy::name('password'), $this->userPassword, 'Password user');
            
            $this->pauseForObservation(2, "ƒê√£ ƒëi·ªÅn th√¥ng tin ƒëƒÉng nh·∫≠p user");
            
            // Click ƒëƒÉng nh·∫≠p
            $this->clickElement(WebDriverBy::name('submit'), 'N√∫t ƒëƒÉng nh·∫≠p user');
            
            $this->pauseForObservation(3, "Ch·ªù k·∫øt qu·∫£ ƒëƒÉng nh·∫≠p");
            $this->logSuccess("ƒêƒÉng nh·∫≠p user th√†nh c√¥ng!");
        } catch (Exception $e) {
            $this->logWarning("Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p ho·∫∑c user ch∆∞a t·ªìn t·∫°i: " . $e->getMessage());
            $this->logInfo("Th·ª≠ truy c·∫≠p tr·ª±c ti·∫øp trang booking...");
        }
    }
    
    /**
     * Test ƒë·∫∑t b√†n h·ª£p l·ªá
     */
    public function testValidBooking()
    {
        $this->logStep(2, "Test ƒë·∫∑t b√†n h·ª£p l·ªá");
        
        // Th·ª≠ ƒëƒÉng nh·∫≠p user tr∆∞·ªõc
        $this->loginUser();
        
        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ƒë·∫∑t b√†n
        $this->logAction("ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ƒë·∫∑t b√†n");
        $this->driver->get($this->baseUrl . '/booking/book.php');
        $this->pauseForObservation(2, "Trang ƒë·∫∑t b√†n ƒë√£ load");
        
        try {
            // Ki·ªÉm tra form ƒë·∫∑t b√†n c√≥ load kh√¥ng
            $this->waitForElement(WebDriverBy::name('first_name'), 10);
            $this->logSuccess("Form ƒë·∫∑t b√†n ƒë√£ load th√†nh c√¥ng");
            
            // ƒêi·ªÅn th√¥ng tin ƒë·∫∑t b√†n
            $this->fillInput(WebDriverBy::name('first_name'), $this->testBookingData['first_name'], 'H·ªç');
            $this->fillInput(WebDriverBy::name('last_name'), $this->testBookingData['last_name'], 'T√™n');
            $this->fillInput(WebDriverBy::name('phone_number'), $this->testBookingData['phone_number'], 'S·ªë ƒëi·ªán tho·∫°i');
            $this->fillInput(WebDriverBy::name('message'), $this->testBookingData['message'], 'Ghi ch√∫');
            
            // Ch·ªçn ng√†y (ng√†y mai)
            $tomorrow = date('Y-m-d', strtotime('+1 day'));
            $this->fillInput(WebDriverBy::name('date'), $tomorrow, 'Ng√†y ƒë·∫∑t b√†n');
            
            // Ch·ªçn gi·ªù
            try {
                $timeSelect = new WebDriverSelect($this->waitForElement(WebDriverBy::name('time')));
                $timeSelect->selectByValue('18:00');
                $this->logAction("Ch·ªçn gi·ªù: 18:00 t·ª´ dropdown");
            } catch (Exception $e) {
                // N·∫øu kh√¥ng c√≥ select, th·ª≠ input text
                $this->fillInput(WebDriverBy::name('time'), '18:00', 'Gi·ªù ƒë·∫∑t b√†n');
            }
            
            $this->pauseForObservation(3, "ƒê√£ ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·∫∑t b√†n");
            
            // Submit form
            $this->clickElement(WebDriverBy::name('submit'), 'N√∫t x√°c nh·∫≠n ƒë·∫∑t b√†n');
            
            $this->pauseForObservation(4, "Ch·ªù k·∫øt qu·∫£ ƒë·∫∑t b√†n");
            
            // Ki·ªÉm tra k·∫øt qu·∫£
            try {
                $this->assertElementExists(WebDriverBy::className('alert-success'));
                $this->logSuccess("ƒê·∫∑t b√†n th√†nh c√¥ng!");
            } catch (Exception $e) {
                // Ki·ªÉm tra c√≥ chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang x√°c nh·∫≠n kh√¥ng
                $currentUrl = $this->driver->getCurrentURL();
                if (strpos($currentUrl, 'success') !== false || strpos($currentUrl, 'thank') !== false) {
                    $this->logSuccess("ƒê·∫∑t b√†n th√†nh c√¥ng (chuy·ªÉn h∆∞·ªõng)!");
                } else {
                    $this->logWarning("Kh√¥ng t√¨m th·∫•y th√¥ng b√°o th√†nh c√¥ng r√µ r√†ng");
                    $this->takeScreenshot('booking_result_unclear');
                }
            }
            
        } catch (Exception $e) {
            $this->logError("L·ªói trong qu√° tr√¨nh ƒë·∫∑t b√†n: " . $e->getMessage());
            $this->takeScreenshot('booking_form_error');
            throw $e;
        }
    }
    
    /**
     * Test validation form ƒë·∫∑t b√†n
     */
    public function testBookingFormValidation()
    {
        echo "\nüìù Test 3: Validation form ƒë·∫∑t b√†n...\n";
        
        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ƒë·∫∑t b√†n
        $this->driver->get($this->baseUrl . '/booking/book.php');
        sleep(2);
        
        try {
            // Test submit form tr·ªëng
            $this->clickElement(WebDriverBy::name('submit'));
            sleep(1);
            
            // Test v·ªõi th√¥ng tin kh√¥ng ƒë·∫ßy ƒë·ªß
            $this->fillInput(WebDriverBy::name('first_name'), 'Test');
            $this->clickElement(WebDriverBy::name('submit'));
            sleep(1);
            
            // Test v·ªõi s·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá
            $this->fillInput(WebDriverBy::name('first_name'), $this->testBookingData['first_name']);
            $this->fillInput(WebDriverBy::name('last_name'), $this->testBookingData['last_name']);
            $this->fillInput(WebDriverBy::name('phone_number'), '123'); // S·ªë kh√¥ng h·ª£p l·ªá
            $this->clickElement(WebDriverBy::name('submit'));
            sleep(1);
            
            echo "   ‚úÖ Form validation ho·∫°t ƒë·ªông!\n";
            
        } catch (Exception $e) {
            echo "   ‚ö†Ô∏è C√≥ th·ªÉ form validation ch∆∞a ƒë∆∞·ª£c implement ƒë·∫ßy ƒë·ªß\n";
        }
    }
    
    /**
     * Test ch·ªçn ng√†y v√† gi·ªù
     */
    public function testDateTimeSelection()
    {
        echo "\n‚è∞ Test 4: Ch·ªçn ng√†y v√† gi·ªù...\n";
        
        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ƒë·∫∑t b√†n
        $this->driver->get($this->baseUrl . '/booking/book.php');
        sleep(2);
        
        try {
            // Test ch·ªçn ng√†y trong qu√° kh·ª© (n·∫øu c√≥ validation)
            $yesterday = date('Y-m-d', strtotime('-1 day'));
            $this->fillInput(WebDriverBy::name('date'), $yesterday);
            
            // Test ch·ªçn ng√†y h√¥m nay
            $today = date('Y-m-d');
            $this->fillInput(WebDriverBy::name('date'), $today);
            
            // Test ch·ªçn ng√†y t∆∞∆°ng lai
            $nextWeek = date('Y-m-d', strtotime('+7 days'));
            $this->fillInput(WebDriverBy::name('date'), $nextWeek);
            
            // Test c√°c khung gi·ªù kh√°c nhau
            try {
                $timeField = $this->waitForElement(WebDriverBy::name('time'));
                $timeField->clear();
                $timeField->sendKeys('12:00'); // Gi·ªù tr∆∞a
                
                $timeField->clear();
                $timeField->sendKeys('19:30'); // Gi·ªù t·ªëi
                
            } catch (Exception $e) {
                echo "   ‚ö†Ô∏è Time field c√≥ th·ªÉ l√† dropdown ho·∫∑c c√≥ format kh√°c\n";
            }
            
            echo "   ‚úÖ Date/Time selection ho·∫°t ƒë·ªông!\n";
            
        } catch (Exception $e) {
            echo "   ‚ö†Ô∏è L·ªói khi test date/time: " . $e->getMessage() . "\n";
        }
    }
}

// Ch·∫°y test n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (basename(__FILE__) == basename($_SERVER["SCRIPT_NAME"])) {
    $test = new BookingTest();
    $test->runAllTests();
}
